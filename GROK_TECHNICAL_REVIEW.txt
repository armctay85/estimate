AUTODESK FORGE INTEGRATION TECHNICAL REVIEW FOR GROK AI
================================================================

EXECUTIVE SUMMARY:
EstiMate platform has 85% complete Autodesk Forge integration for BIM Auto-Takeoff.
Authentication, bucket management, translation jobs work correctly.
CRITICAL ISSUE: File upload endpoint fails - req.file always undefined despite frontend sending files.
BUSINESS IMPACT: $44.985M pipeline blocked, 15 enterprise prospects waiting.

ENVIRONMENT SETUP:
Required secrets in Replit environment:
FORGE_CLIENT_ID=your_client_id_from_autodesk_developer_portal
FORGE_CLIENT_SECRET=your_client_secret_from_autodesk_developer_portal

WORKING COMPONENTS:
✅ Authentication with Autodesk API v2 endpoint
✅ Bucket creation and management  
✅ Translation job creation
✅ BIM data extraction with Australian rates
✅ Frontend file selection and FormData creation

BROKEN COMPONENT:
❌ File upload endpoint - multer middleware conflicts

================================================================
BACKEND CODE - server/forge-real-integration.ts
================================================================

import axios from 'axios';
import fs from 'fs';

const FORGE_BASE_URL = 'https://developer.api.autodesk.com';

let tokenCache = null;

export async function authenticateForge() {
  if (tokenCache && Date.now() < tokenCache.expires_at) {
    return tokenCache.access_token;
  }

  const clientId = process.env.FORGE_CLIENT_ID;
  const clientSecret = process.env.FORGE_CLIENT_SECRET;

  if (!clientId || !clientSecret) {
    throw new Error('Missing Forge credentials');
  }

  try {
    const response = await axios.post(
      FORGE_BASE_URL + '/authentication/v2/token',
      'grant_type=client_credentials&scope=data:read data:write data:create bucket:create bucket:read',
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64')
        }
      }
    );

    const access_token = response.data.access_token;
    const expires_in = response.data.expires_in;
    
    tokenCache = {
      access_token: access_token,
      expires_at: Date.now() + (expires_in - 300) * 1000
    };

    return access_token;
  } catch (error) {
    console.error('Forge authentication failed:', error.response?.data || error.message);
    throw new Error('Failed to authenticate with Autodesk Platform Services');
  }
}

export async function ensureBucket(bucketKey) {
  const token = await authenticateForge();

  try {
    await axios.get(
      FORGE_BASE_URL + '/oss/v2/buckets/' + bucketKey + '/details',
      { headers: { 'Authorization': 'Bearer ' + token } }
    );
  } catch (error) {
    if (error.response?.status === 404) {
      await axios.post(
        FORGE_BASE_URL + '/oss/v2/buckets',
        { bucketKey: bucketKey, policyKey: 'temporary' },
        {
          headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
          }
        }
      );
    } else {
      throw error;
    }
  }
}

export async function uploadBIMFile(filePath, fileName, bucketKey = 'estimate-bim-files') {
  const token = await authenticateForge();
  await ensureBucket(bucketKey);

  const fileStream = fs.createReadStream(filePath);
  const fileStats = fs.statSync(filePath);

  try {
    const response = await axios.put(
      FORGE_BASE_URL + '/oss/v2/buckets/' + bucketKey + '/objects/' + fileName,
      fileStream,
      {
        headers: {
          'Authorization': 'Bearer ' + token,
          'Content-Type': 'application/octet-stream',
          'Content-Length': fileStats.size
        },
        maxContentLength: 500 * 1024 * 1024,
        maxBodyLength: 500 * 1024 * 1024
      }
    );

    return response.data.objectId;
  } catch (error) {
    console.error('File upload failed:', error.response?.data);
    throw new Error('Failed to upload file to Forge');
  }
}

export async function translateBIMFile(objectId) {
  const token = await authenticateForge();

  const jobPayload = {
    input: { urn: Buffer.from(objectId).toString('base64') },
    output: { formats: [{ type: 'svf2', views: ['2d', '3d'] }] }
  };

  try {
    const response = await axios.post(
      FORGE_BASE_URL + '/modelderivative/v2/designdata/job',
      jobPayload,
      {
        headers: {
          'Authorization': 'Bearer ' + token,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.urn;
  } catch (error) {
    console.error('Translation job failed:', error.response?.data);
    throw new Error('Failed to start translation job');
  }
}

================================================================
API ROUTES CODE - server/routes.ts (PROBLEM AREA)
================================================================

import multer from 'multer';

CRITICAL ISSUE HERE - This multer configuration fails:

app.post('/api/forge/upload-bim', 
  multer({ 
    dest: 'uploads/',
    limits: { fileSize: 500 * 1024 * 1024 }
  }).single('bimFile'),
  async (req, res) => {
    try {
      console.log('Upload endpoint hit');
      console.log('Request file:', req.file);  // ALWAYS UNDEFINED
      console.log('Request body:', req.body);  // ALWAYS EMPTY {}
      
      if (!req.file) {
        return res.status(400).json({ error: 'No file uploaded' });
      }

      const originalname = req.file.originalname;
      const path = req.file.path;
      
      const objectId = await uploadBIMFile(path, originalname);
      const urn = await translateBIMFile(objectId);
      
      fs.unlinkSync(path);
      
      res.json({
        success: true,
        objectId: objectId,
        urn: urn,
        fileName: originalname
      });
    } catch (error) {
      console.error('BIM upload error:', error);
      res.status(500).json({ error: error.message });
    }
  }
);

Working endpoints that prove backend is functional:

app.get('/api/forge/token', async (req, res) => {
  try {
    const token = await authenticateForge();
    res.json({ access_token: token });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/test-services', async (req, res) => {
  const services = {
    xai: !!process.env.XAI_API_KEY,
    openai: !!process.env.OPENAI_API_KEY,
    forge: false
  };

  try {
    await authenticateForge();
    services.forge = true;
  } catch (error) {
    console.error('Forge test failed:', error);
  }

  res.json(services);
});

Current response from /api/test-services: {"xai":true,"openai":true,"forge":true}

================================================================
FRONTEND CODE - client/src/components/simple-bim-modal.tsx
================================================================

import React, { useState } from "react";

export function SimpleBIMModal({ isOpen, onClose }) {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadStatus, setUploadStatus] = useState("");

  const handleFileUpload = async (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    console.log('File selected:', file.name, file.size, file.type);
    
    setIsUploading(true);
    setUploadStatus("Uploading to Autodesk Platform Services...");
    
    const formData = new FormData();
    formData.append('bimFile', file);
    
    console.log('FormData created, starting upload...');

    try {
      const response = await fetch('/api/forge/upload-bim', {
        method: 'POST',
        body: formData
      });

      console.log('Upload response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Upload failed:', response.status, errorText);
        throw new Error('Upload failed: ' + response.statusText);
      }

      const result = await response.json();
      console.log('Upload successful:', result);
      
      setUploadStatus("Translation started. Processing BIM file...");
      
    } catch (error) {
      console.error('Upload error:', error);
      setUploadStatus('Error: ' + error.message);
    } finally {
      setIsUploading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <h3 className="text-lg font-semibold mb-2">Upload BIM Files</h3>
        <p className="text-gray-600 mb-2">Real Autodesk Platform Services processing</p>
        <p className="text-sm text-gray-500">Supports: Revit (.rvt), IFC (.ifc), AutoCAD (.dwg), DXF (.dxf)</p>
        
        <input
          type="file"
          accept=".rvt,.ifc,.dwg,.dxf"
          onChange={handleFileUpload}
          disabled={isUploading}
          className="mt-4 block w-full text-sm text-gray-500"
        />
        
        {isUploading && (
          <div className="mt-4">
            <div className="text-sm text-gray-600 mb-2">{uploadStatus}</div>
          </div>
        )}
        
        <div className="mt-6 flex justify-end gap-3">
          <button onClick={onClose} className="px-4 py-2 text-gray-600 rounded-lg">Cancel</button>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg" disabled={isUploading}>
            {isUploading ? 'Processing...' : 'Process BIM'}
          </button>
        </div>
      </div>
    </div>
  );
}

================================================================
ERROR LOGS AND DEBUGGING INFORMATION
================================================================

FRONTEND CONSOLE OUTPUT:
File selected: example.rvt 52428800 application/octet-stream
FormData created, starting upload...
Upload response status: 400
Upload failed: 400 Bad Request

BACKEND CONSOLE OUTPUT:
Upload endpoint hit
Request file: undefined  <-- PROBLEM IS HERE
Request body: {}
Error: No file uploaded

CURL TESTS THAT WORK:
curl -X GET http://localhost:5000/api/test-services
Response: {"xai":true,"openai":true,"forge":true}

curl -X POST http://localhost:5000/api/forge/token
Response: {"access_token":"eyJ...valid_token_here"}

ATTEMPTED FIXES THAT DID NOT WORK:
1. Changed multer destination to absolute path
2. Modified field name from 'bimFile' to 'file'
3. Tried multer.array() instead of multer.single()
4. Added fileFilter and filename functions to multer config
5. Moved multer middleware to different position in middleware chain
6. Created separate Express router for upload endpoint
7. Tried bypassing multer and using busboy for multipart parsing
8. Used XMLHttpRequest instead of fetch on frontend
9. Added explicit Content-Type headers
10. Manual FormData boundary setting

================================================================
BUSINESS IMPACT AND URGENCY
================================================================

REVENUE BLOCKED:
- 15 enterprise prospects waiting for BIM functionality
- $2.999M annual revenue per enterprise client
- Total pipeline at risk: $44.985M annually

COMPETITIVE ADVANTAGE:
- Only platform offering ±2% accuracy from real BIM data
- QS department replacement saves clients $180k-270k annually
- 15-45 minute processing vs weeks of manual quantity surveying

TECHNICAL DEBT:
- 85% complete implementation creates maintenance burden
- User expectations set but not delivered
- Authentication working but upload failing confuses troubleshooting

================================================================
SPECIFIC QUESTIONS FOR GROK ANALYSIS
================================================================

1. Why is req.file undefined when frontend successfully creates FormData with file?

2. Could there be existing multer middleware in the Express app conflicting with this endpoint?

3. Is there a better way to handle 500MB BIM file uploads without multer?

4. Should we implement chunked upload for large BIM files instead?

5. Are there Express.js middleware order issues preventing multer from processing the request?

6. Could body-parser or other middleware be consuming the request before multer gets it?

7. Is there a way to debug exactly where in the middleware chain the file is being lost?

================================================================
EXPECTED WORKFLOW ONCE FIXED
================================================================

1. User selects .rvt/.ifc/.dwg file in frontend
2. Frontend creates FormData and POSTs to /api/forge/upload-bim
3. Multer middleware extracts file to uploads/ directory
4. Backend uploads file to Forge bucket
5. Backend starts translation job and returns URN
6. Frontend polls translation status every 30 seconds
7. Once complete, backend extracts BIM elements and properties
8. Australian construction rates applied to calculate costs
9. Results stored and displayed in 3D viewer

CURRENT STATUS: Step 3 fails - multer never receives the file

================================================================
DEPLOYMENT ARCHITECTURE
================================================================

The platform runs on Replit with:
- Express.js backend on port 5000
- Vite frontend dev server
- PostgreSQL database
- Autodesk Forge API integration
- X AI (Grok) for cost predictions

File upload should handle:
- .rvt files up to 500MB
- .ifc, .dwg, .dxf formats
- Real-time progress tracking
- Error handling for oversized files

================================================================
REQUEST FOR GROK
================================================================

Please analyze this multer middleware configuration issue and provide:

1. Root cause analysis of why req.file is undefined
2. Corrected multer configuration or alternative approach
3. Any Express.js middleware conflicts to resolve
4. Recommended file upload architecture for 500MB BIM files
5. Testing approach to validate the fix

The EstiMate platform is ready for enterprise deployment except for this single file upload issue blocking the $44.985M pipeline.

================================================================
END OF TECHNICAL REVIEW
================================================================